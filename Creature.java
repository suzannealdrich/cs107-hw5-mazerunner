//---------------------------------------------------------------80 columns---|/* Creature class * -------------- * This is the class that specifies the behavior of creature threads. * The class itself has a static game reference. Each creature knows * where it is and how to draw itself, and can move, interact with * each square, consume energy, fall, and die. */public class Creature extends Thread {    protected static MazeRunner game;    protected Square place;    protected String image;    public static void setGame(MazeRunner newGame)    {        game = newGame;    }    public Creature(Square start)    {        super("Creature Thread");        place = start;    }    public void run()    {         while (game.isRunning()) {            if (place.hasSupport()) {                  move(plan());            } else                fall();        }    }    public void draw()    {        Display.drawAtLocation(image, place.getLocation());    }     public void freeze()    {         pause(Util.randomInteger(1000, 3000));    }    public void takeGoal()    {    }    protected void pause(int numMilliseconds)    {        try { sleep(numMilliseconds); }        catch (InterruptedException ie) {}    }    public synchronized void transfer(Square next)    {        place.checkOut(this);        place = next;        place.checkIn(this);        }        public void takeEnergy()    {        if (place.getEnergy()) storeEnergy();    }    public void leaveEnergy()    {        }    public synchronized void die()    {        place.checkOut(this);        game.kill(this);    }	protected Square plan()	{		return place;	}	protected void storeEnergy()	{	}	private void move(Square newSquare)	{		place.leaveAction(this);		transfer(newSquare);		place.enterAction(this);	}	private void fall()	{ 		pause(200);		move(game.getSquareAt(place.getLocation().adjacentLocation(Location.South)));	}}