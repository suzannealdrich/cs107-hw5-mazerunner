//---------------------------------------------------------------80 columns---|/* Rover class * ----------- * This is the class that specifies the behavior of rover threads. * Each rover plans to chase the human. */public class Rover extends Enemy {	public Rover(Square start)	{		super(start);		image = "Rover";		pauseTime = 300;	}	protected Square plan()	{		Square nextSquare;		Location nextLoc;				delay();		if (Util.randomChance(0.5)) {			if (!(nextSquare = seekHorizontal()).equals(place)) return nextSquare;			if (!(nextSquare = seekVertical()).equals(place)) return nextSquare;		} else {			if (!(nextSquare = seekVertical()).equals(place)) return nextSquare;			if (!(nextSquare = seekHorizontal()).equals(place)) return nextSquare;		}		do {			do { 				int direction = Util.randomInteger(Location.North, Location.West); 				nextLoc = place.getLocation().adjacentLocation(direction); 			} while (!game.inBounds(nextLoc));		} while (!(nextSquare = game.getSquareAt(nextLoc)).isEnterable());		return nextSquare;		}	private Square seekHorizontal()	{		Square nextSquare;		Location loc = place.getLocation();        int range = game.getHuman().getLocation().getCol() - loc.getCol();				if (range < 0) {			nextSquare = game.getSquareAt(loc.adjacentLocation(Location.West));			if (nextSquare.isEnterable()) return nextSquare;		}		if (range > 0) {			nextSquare = game.getSquareAt(loc.adjacentLocation(Location.East));			if (nextSquare.isEnterable()) return nextSquare;		}				return place;	}	private Square seekVertical()	{		Square nextSquare;		Location loc = place.getLocation();  		int range = game.getHuman().getLocation().getRow() - loc.getRow();				if (range < 0) {			nextSquare = game.getSquareAt(loc.adjacentLocation(Location.North));			if (nextSquare.isEnterable()) return nextSquare;		}		if (range > 0) {			nextSquare = game.getSquareAt(loc.adjacentLocation(Location.South));			if (nextSquare.isEnterable()) return nextSquare;		}				return place;	}}