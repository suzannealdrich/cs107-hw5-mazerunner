//---------------------------------------------------------------80 columns---|/* Square class * ------------ * This is the class that specifies the behavior of square objects. * The class itself has a static game reference. Each square knows * where it is, how to draw its occupants and energy, * if it is enterable or diggable, if it provides support or has support,  * if it has energy, and who occupies it. It also manages entering and * leaving occupants and the corresponding square actions, such as taking * energy or killing the human when tagged by an enemy in the square */ import java.util.Vector;public class Square extends Object {    protected static MazeRunner game;    protected Location location;    protected boolean hasEnergy;    protected Vector occupants;    public static void setGame(MazeRunner newGame)    {        game = newGame;    }    public Square(Location loc)    {        location = loc;        hasEnergy = false;        occupants = new Vector();    }    public void setOccupant(Creature occupant)    {        occupants.addElement(occupant);    }    public synchronized void putEnergy()    {        if (!hasEnergy) { hasEnergy = true; draw(); }    }    public synchronized boolean getEnergy()    {        boolean appl = hasEnergy;        hasEnergy = false;        if (appl) draw(); return appl;    }    public Location getLocation()    {        return location;    }    public synchronized void draw()    {        for (int i = 0; i < occupants.size(); i++)            ((Creature)occupants.elementAt(i)).draw();        if (hasEnergy) Display.drawAtLocation("Energy", location);    }    public boolean isDiggable()    {        return false;    }    public boolean isEnterable()    {        return true;    }    public boolean hasSupport()    {        Location below = location.adjacentLocation(Location.South);        return (providesSupport() || !game.inBounds(below) || game.getSquareAt(below).providesSupport());    }    public synchronized void checkIn(Creature newOccupant)    {        occupants.addElement(newOccupant);        if (isEnterable()) draw(); else newOccupant.die();    }    public synchronized void checkOut(Creature oldOccupant)    {        occupants.removeElement(oldOccupant);        draw();    }    public void enterAction(Creature occupant)    {        if (occupants.size() > 1 && occupants.contains(game.getHuman())) game.getHuman().die();        occupant.takeEnergy();    }    public void leaveAction(Creature occupant)    {        occupant.leaveEnergy();    }    protected boolean providesSupport()    {        return false;    }   }